var documenterSearchIndex = {"docs":
[{"location":"#BatchNLPKernels.jl","page":"Home","title":"BatchNLPKernels.jl","text":"","category":"section"},{"location":"#BatchNLPKernels.BatchModel","page":"Home","title":"BatchNLPKernels.BatchModel","text":"BatchModel{MT,E}\n\nA wrapper around ExaModel that pre-initializes buffers for batch operations. Allows efficient evaluation of multiple points simultaneously.\n\nFields\n\nmodel::ExaModel: The underlying ExaModel\nbatch_size::Int: Number of points to evaluate simultaneously\nobj_work::MT: Batch objective values (nobj × batch_size)\ncons_work::MT: Batch constraint values (nconaug × batch_size)\ncons_out::MT: Dense constraint output buffer (ncon × batch_size)\ngrad_work::MT: Batch gradient values (nnzg × batch_size)\ngrad_out::MT: Dense gradient output buffer (nvar × batch_size)\njprod_work::MT: Batch jacobian values (nnzj × batch_size)\nhprod_work::MT: Batch hessian values (nnzh × batch_size)\njprod_out::MT: Batch jacobian-vector product buffer (ncon × batch_size)\njtprod_out::MT: Batch jacobian transpose-vector product buffer (nvar × batch_size)\nhprod_out::MT: Batch hessian-vector product buffer (nvar × batch_size)\nviols_cons_out::MT: Constraint violation output buffer (ncon × batch_size)\nviols_vars_out::MT: Variable violation output buffer (nvar × batch_size)\nviols_cons::Interval: Constraint bounds as interval set\nviols_vars::Interval: Variable bounds as interval set\n\n\n\n\n\n","category":"type"},{"location":"#BatchNLPKernels.BatchModel-Union{Tuple{C}, Tuple{O}, Tuple{E}, Tuple{VT}, Tuple{T}, Tuple{ExaModels.ExaModel{T, VT, E, O, C}, Int64}} where {T, VT, E, O, C}","page":"Home","title":"BatchNLPKernels.BatchModel","text":"BatchModel(model::ExaModel, batch_size::Int; config=BatchModelConfig())\n\nCreate a BatchModel wrapper around an ExaModel with pre-allocated buffers for batch operations. Use config to specify which buffers to allocate.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.BatchModelConfig","page":"Home","title":"BatchNLPKernels.BatchModelConfig","text":"BatchModelConfig\n\nConfiguration struct for controlling which buffers are allocated in a BatchModel.\n\nFields\n\nobj::Bool: Allocate objective buffer (default: true)\ncons::Bool: Allocate constraint buffers (default: true)\ngrad::Bool: Allocate gradient buffers (default: false)\njac::Bool: Allocate jacobian buffer (default: false)\nhess::Bool: Allocate hessian buffer (default: false)\njprod::Bool: Allocate jacobian-vector product buffer (default: false)\njtprod::Bool: Allocate jacobian transpose-vector product buffer (default: false)\nhprod::Bool: Allocate hessian-vector product buffer (default: false)\nviols::Bool: Allocate constraint and variable violation buffers (default: false)\n\n\n\n\n\n","category":"type"},{"location":"#BatchNLPKernels.BatchModelConfig-Tuple{Val{:full}}","page":"Home","title":"BatchNLPKernels.BatchModelConfig","text":"BatchModelConfig(:full)\n\nFull configuration with all buffers allocated.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.BatchModelConfig-Tuple{Val{:gradients}}","page":"Home","title":"BatchNLPKernels.BatchModelConfig","text":"BatchModelConfig(:gradients)\n\nConfiguration to support obj, cons, and their gradients (grad, jtprod).\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.BatchModelConfig-Tuple{Val{:minimal}}","page":"Home","title":"BatchNLPKernels.BatchModelConfig","text":"BatchModelConfig(:minimal)\n\nMinimal configuration with only objective and constraint buffers.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.BatchModelConfig-Tuple{Val{:viol_grad}}","page":"Home","title":"BatchNLPKernels.BatchModelConfig","text":"BatchModelConfig(:viol_grad)\n\nConfiguration to support obj, cons, constraint/variable violations, and their gradients.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.BatchModelConfig-Tuple{Val{:violations}}","page":"Home","title":"BatchNLPKernels.BatchModelConfig","text":"BatchModelConfig(:violations)\n\nConfiguration to support obj, cons, and constraint/variable violations.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.BatchModelConfig-Tuple{}","page":"Home","title":"BatchNLPKernels.BatchModelConfig","text":"BatchModelConfig(; obj=true, cons=true, grad=false, jac=false, hess=false, jprod=false, jtprod=false, hprod=false, viols=false)\n\nCreate a BatchModelConfig with specified buffer allocations.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.Interval","page":"Home","title":"BatchNLPKernels.Interval","text":"Interval{VT}\n\nRepresents the RHS of M constraints g(xᵢ) ∈ [lᵢ, uᵢ]  ∀i ∈ 1:M.\n\n\n\n\n\n","category":"type"},{"location":"#BatchNLPKernels.all_violations!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.all_violations!","text":"all_violations!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix)\n\nCompute all constraint and variable violations for a batch of solutions and parameters.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.all_violations!-Tuple{BatchModel, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.all_violations!","text":"all_violations!(bm::BatchModel, X::AbstractMatrix)\n\nCompute all constraint and variable violations for a batch of solutions.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.bound_violations!-Tuple{BatchModel, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.bound_violations!","text":"bound_violations!(bm::BatchModel, X::AbstractMatrix)\n\nCompute variable violations for a batch of variable primal values.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraint_violations!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.constraint_violations!","text":"constraint_violations!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix)\n\nCompute constraint violations for a batch of constraint primal values.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraint_violations!-Tuple{BatchModel, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.constraint_violations!","text":"constraint_violations!(bm::BatchModel, X::AbstractMatrix)\n\nCompute constraint violations for a batch of constraint primal values.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraints!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.constraints!","text":"constraints!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix)\n\nEvaluate constraints for a batch of solutions and parameters.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraints!-Tuple{BatchModel, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.constraints!","text":"constraints!(bm::BatchModel, X::AbstractMatrix)\n\nEvaluate constraints for a batch of solutions.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraints_jacobian!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.constraints_jacobian!","text":"constraints_jacobian!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix)\n\nEvaluate Jacobian coordinates for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraints_jacobian!-Tuple{BatchModel, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.constraints_jacobian!","text":"constraints_jacobian!(bm::BatchModel, X::AbstractMatrix)\n\nEvaluate Jacobian coordinates for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraints_jprod!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.constraints_jprod!","text":"constraints_jprod!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, V::AbstractMatrix)\n\nEvaluate Jacobian-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraints_jprod!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.constraints_jprod!","text":"constraints_jprod!(bm::BatchModel, X::AbstractMatrix, V::AbstractMatrix)\n\nEvaluate Jacobian-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraints_jprod!-Tuple{BatchModel, Vararg{AbstractMatrix, 4}}","page":"Home","title":"BatchNLPKernels.constraints_jprod!","text":"constraints_jprod!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, V::AbstractMatrix, Jv::AbstractMatrix)\n\nEvaluate Jacobian-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraints_jtprod!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.constraints_jtprod!","text":"constraints_jtprod!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, V::AbstractMatrix)\n\nEvaluate Jacobian-transpose-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraints_jtprod!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.constraints_jtprod!","text":"constraints_jtprod!(bm::BatchModel, X::AbstractMatrix, V::AbstractMatrix)\n\nEvaluate Jacobian-transpose-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.constraints_jtprod!-Tuple{BatchModel, Vararg{AbstractMatrix, 4}}","page":"Home","title":"BatchNLPKernels.constraints_jtprod!","text":"constraints_jtprod!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, V::AbstractMatrix, Jtv::AbstractMatrix)\n\nEvaluate Jacobian-transpose-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.lagrangian_hessian!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.lagrangian_hessian!","text":"lagrangian_hessian!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, Y::AbstractMatrix; obj_weight=1.0)\n\nEvaluate Hessian coordinates for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.lagrangian_hessian!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.lagrangian_hessian!","text":"lagrangian_hessian!(bm::BatchModel, X::AbstractMatrix, Y::AbstractMatrix; obj_weight=1.0)\n\nEvaluate Hessian coordinates for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.lagrangian_hprod!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.lagrangian_hprod!","text":"lagrangian_hprod!(bm::BatchModel, X::AbstractMatrix, Y::AbstractMatrix, V::AbstractMatrix; obj_weight=1.0)\n\nEvaluate Hessian-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.lagrangian_hprod!-Tuple{BatchModel, Vararg{AbstractMatrix, 4}}","page":"Home","title":"BatchNLPKernels.lagrangian_hprod!","text":"lagrangian_hprod!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, Y::AbstractMatrix, V::AbstractMatrix; obj_weight=1.0)\n\nEvaluate Hessian-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.objective!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.objective!","text":"objective!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix)\n\nEvaluate objective function for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.objective!-Tuple{BatchModel, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.objective!","text":"objective!(bm::BatchModel, X::AbstractMatrix)\n\nEvaluate objective function for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.objective_gradient!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.objective_gradient!","text":"objective_gradient!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, G::AbstractMatrix)\n\nEvaluate gradients for a batch of points with different parameters.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.objective_gradient!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.objective_gradient!","text":"objective_gradient!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix)\n\nEvaluate objective gradient for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.objective_gradient!-Tuple{BatchModel, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.objective_gradient!","text":"objective_gradient!(bm::BatchModel, X::AbstractMatrix)\n\nEvaluate objective gradient for a batch of points.\n\n\n\n\n\n","category":"method"}]
}
